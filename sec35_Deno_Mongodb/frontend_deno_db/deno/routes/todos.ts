import { Router } from "https://deno.land/x/oak@v12.6.0/mod.ts";
import { getDb } from "../helpers/db_client.ts";
//import { ObjectId } from "https://deno.land/x/mongo@v0.33.0/mod.ts";


const router = new Router();

interface Todo {
  id?: string; // ? -optional
  text: string;
}

let todos: Todo[] = [];

router.get('/todos',async (ctx) => {
  console.log('inside get todos')
  //collection [ { _id: mongodbObjectId, text: '....'}, ...]
  const todos =  await getDb().collection('todos').find().toArray()
  const transformedTodos = todos.map( (todo) => {
    return {id: todo._id.toString(), text: todo.text}
    //$oid is property provided by mongo lib on the doc it fetch from mongodb,that will hold the generated id. generated by mongodb as a string
  })
  ctx.response.body = { todos: transformedTodos };
});

router.post('/todos', async (ctx) => {
  const result =  ctx.request.body();
  const data = await result.value 
  const newTodo: Todo = {
    //id: new Date().toISOString(),
    text: data.text,
  };

  const id = await getDb().collection('todos').insertOne(newTodo);
//id is autogenerated by mongodb

  // newTodo.id = id.$oid;
  // , todo: newTodo
  ctx.response.body = { message: 'Created todo!' };
});

router.put('/todos/:todoId', async (ctx) => {
  const tid = ctx.params.todoId;
  const result =  ctx.request.body();
  const data = await result.value
  const todoIndex = todos.findIndex((todo) => {
    return todo.id === tid;
  });
  todos[todoIndex] = { id: todos[todoIndex].id, text: data.text };
  ctx.response.body = { message: 'Updated todo' };
});

router.delete('/todos/:todoId', (ctx) => {
  const tid = ctx.params.todoId;
  todos = todos.filter((todo) => todo.id !== tid);
  ctx.response.body = { message: 'Deleted todo' };
});

export default router;
